"""
分治算法（分而治之）
通常基于递归实现，包括 分 和 治
分： 划分阶段，递归的将原问题分解为两个或多个子问题，直至达到最小子问题
治： 合并阶段，从已知解的最小子问题开始，从底到顶的将子问题的解进行合并，从而构建出原问题的解。

如何判断分治问题：
1. 问题可以分解： 原问题可以分解成规模更小的类似的子问题，以及能以相同的方式递归的进行划分
2. 子问题是独立的：子问题之间没有重叠，不相互依赖，可以独立解决
3. 子问题的解可以合并：原问题的解可以通过合并子问题的解得来

一方面，分治可以用来解决许多经典算法问题。

寻找最近点对：该算法首先将点集分成两部分，然后分别找出两部分中的最近点对，最后找出跨越两部分的最近点对。
大整数乘法：例如 Karatsuba 算法，它将大整数乘法分解为几个较小的整数的乘法和加法。
矩阵乘法：例如 Strassen 算法，它将大矩阵乘法分解为多个小矩阵的乘法和加法。
汉诺塔问题：汉诺塔问题可以通过递归解决，这是典型的分治策略应用。
求解逆序对：在一个序列中，如果前面的数字大于后面的数字，那么这两个数字构成一个逆序对。求解逆序对问题可以利用分治的思想，借助归并排序进行求解。
另一方面，分治在算法和数据结构的设计中应用得非常广泛。

二分查找：二分查找是将有序数组从中点索引处分为两部分，然后根据目标值与中间元素值比较结果，决定排除哪一半区间，并在剩余区间执行相同的二分操作。
归并排序：本节开头已介绍，不再赘述。
快速排序：快速排序是选取一个基准值，然后把数组分为两个子数组，一个子数组的元素比基准值小，另一子数组的元素比基准值大，再对这两部分进行相同的划分操作，直至子数组只剩下一个元素。
桶排序：桶排序的基本思想是将数据分散到多个桶，然后对每个桶内的元素进行排序，最后将各个桶的元素依次取出，从而得到一个有序数组。
树：例如二叉搜索树、AVL 树、红黑树、B 树、B+ 树等，它们的查找、插入和删除等操作都可以视为分治策略的应用。
堆：堆是一种特殊的完全二叉树，其各种操作，如插入、删除和堆化，实际上都隐含了分治的思想。
哈希表：虽然哈希表并不直接应用分治，但某些哈希冲突解决方案间接应用了分治策略，例如，链式地址中的长链表会被转化为红黑树，以提升查询效率。
"""